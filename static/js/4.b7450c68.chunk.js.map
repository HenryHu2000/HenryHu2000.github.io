{"version":3,"file":"static/js/4.b7450c68.chunk.js","mappings":"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","sources":["components/board/token/Token.tsx","components/board/column/Column.tsx","components/board/Board.tsx","components/endscreen/EndScreen.tsx","game/useConnectFour.ts","components/startscreen/userconfcard/UserConfCard.tsx","components/startscreen/StartScreen.tsx","connect-four/ConnectFour.tsx"],"sourcesContent":["import React, {ReactElement} from 'react';\n\nimport {TokenProps} from './types';\nimport './style.scss';\n\nconst Token = (props: TokenProps): ReactElement => (\n  <div className=\"token-wrapper\">\n    <div className={`token ${props.colour ? props.colour : ''} ${props.phantom ? 'phantom' : ''}`} />\n  </div>\n);\n\nexport default Token;\n","import React, {ReactElement, useState} from 'react';\nimport {PlayerType} from '../../../globals';\nimport Token from '../token/Token';\n\nimport {ColumnProps} from './types';\nimport './style.scss';\n\nconst Column = (props: ColumnProps): ReactElement => {\n  const [hovered, setHovered] = useState<boolean>(false);\n\n  const tokenToColour = (token: PlayerType) => {\n    switch (token) {\n    case PlayerType.PlayerOne:\n      return props.gameConfig.playerOneColour;\n    case PlayerType.PlayerTwo:\n      return props.gameConfig.playerTwoColour;\n    default:\n      return undefined;\n    }\n  };\n\n  const full = props.tokens.length >= props.gameState.boardHeight;\n  const showPhantom = hovered && !full;\n\n  return (\n    <div className={`column ${!full ? 'clickable' : ''}`} \n      onClick={!full ? props.onClick : undefined}\n      onMouseEnter={() => {setHovered(true);}}\n      onMouseLeave={() => {setHovered(false);}}\n    >\n      {\n        props.tokens.map((token, tokenIndex: number) =>\n          <Token \n            key={`token-${props.index}-${tokenIndex}`} \n            colour={tokenToColour(token)} \n          />\n        )\n          .concat(\n            showPhantom ? \n              [<Token \n                key={`token-phantom`} \n                colour={tokenToColour(props.gameState.currentPlayer)} \n                phantom={true}\n              />] : []\n          )\n          .concat(\n            Array(props.gameState.boardHeight - props.tokens.length - (showPhantom ? 1 : 0))\n              .fill(undefined)\n              .map((_, tokenIndex: number) => (\n                <Token \n                  key={`token-${props.index}-${tokenIndex + props.tokens.length}`} \n                />\n              ))\n          )\n          .reverse()\n      }\n    </div>\n  );\n};\n\nexport default Column;\n","import React, {ReactElement} from 'react';\nimport {PlayerType} from '../../globals';\nimport Column from './column/Column';\n\nimport {BoardProps} from './types';\nimport './style.scss';\n\nconst Board = (props: BoardProps): ReactElement => {\n  const columns = props.gameState.grid.map((col: PlayerType[], colIndex: number) => (\n    <Column\n      key={`column-${colIndex}`}\n      index={colIndex}\n      tokens={col}\n      gameState={props.gameState}\n      gameConfig={props.gameConfig}\n      onClick={() => props.placeToken(colIndex, props.gameState.currentPlayer)}\n    />\n  ));\n  return (\n    <div className='board'>\n      {columns}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, {FormEvent, ReactElement} from 'react';\nimport {GameStage, PlayerType} from '../../globals';\n\nimport {EndScreenProps} from './types';\nimport './style.scss';\n\nconst EndScreen = (props: EndScreenProps): ReactElement => {\n  const onSubmit = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    props.setGameStage(GameStage.Start);\n    props.resetGame();\n  };\n\n  let message = '';\n  if (props.gameState.winner !== undefined) {\n    message = `${\n      props.gameState.winner === PlayerType.PlayerOne \n        ? props.gameConfig.playerOneName \n        : props.gameConfig.playerTwoName \n    } wins!`;\n  } else {\n    message = 'Draw!';\n  }\n  return (\n    <div className='end-screen'>\n      <h1 className='end-message'>{message}</h1>\n      <form onSubmit={onSubmit}>\n        <input type='submit' value='Rematch' />\n      </form>\n    </div>\n  );\n};\n\nexport default EndScreen;\n","import {useState} from 'react';\nimport {GameStage, PlayerType, WIN_LENGTH} from '../globals';\n\nimport {GameState} from './types';\n\nconst updateGameStatus = (gameState: GameState, lastPos: { row: number; col: number })\n  : GameState => {\n  const checkRowLength = (rowOffset: number, colOffset: number): number => {\n    let currPos = {...lastPos};\n    let rowLength = 0;\n    for (; rowLength < WIN_LENGTH - 1; rowLength++) {\n      // Skip the position last placed\n      currPos = {row: currPos.row += rowOffset, col: currPos.col += colOffset};\n      if (gameState.grid[currPos.col] === undefined ||\n        gameState.grid[currPos.col][currPos.row] !== gameState.currentPlayer) {\n        break;\n      }\n    }\n    return rowLength;\n  };\n\n  const isGridFull = (grid: PlayerType[][]): boolean =>\n    grid.filter(tokens => tokens.length < gameState.boardHeight).length === 0;\n\n  if (checkRowLength(-1, -1) + 1 + checkRowLength(1, 1) >= WIN_LENGTH ||\n    checkRowLength(-1, 0) + 1 + checkRowLength(1, 0) >= WIN_LENGTH ||\n    checkRowLength(-1, 1) + 1 + checkRowLength(1, -1) >= WIN_LENGTH ||\n    checkRowLength(0, -1) + 1 + checkRowLength(0, 1) >= WIN_LENGTH) {\n    return {...gameState, gameStage: GameStage.End, winner: gameState.currentPlayer};\n  } else if (isGridFull(gameState.grid)) {\n    return {...gameState, gameStage: GameStage.End, winner: undefined}; // A draw\n  }\n  return gameState;\n};\n\nconst switchSide = (gameState: GameState): GameState => {\n  const getOtherPlayer = (player: PlayerType): PlayerType =>\n    (player === PlayerType.PlayerOne) ? PlayerType.PlayerTwo : PlayerType.PlayerOne;\n  return {...gameState, currentPlayer: getOtherPlayer(gameState.currentPlayer)};\n};\n\nconst getInitialState = (boardWidth: number, boardHeight: number) : GameState => ({\n  grid: new Array(boardWidth).fill([]),\n  boardHeight: boardHeight,\n  currentPlayer: PlayerType.PlayerOne, // Player 1 plays first\n  gameStage: GameStage.Start,\n  winner: undefined\n});\n\nconst useConnectFour = (boardWidth: number, boardHeight: number)\n  : [GameState, \n    (stage: GameStage) => void,\n    (colIndex: number, token: PlayerType) => void,\n    () => void] => {\n  const [gameState, setGameState] \n    = useState<GameState>(getInitialState(boardWidth, boardHeight));\n\n  const setGameStage = (stage: GameStage): void => {\n    setGameState(\n      {\n        ...gameState,\n        gameStage: stage\n      }\n    );\n  };\n\n  const placeToken = (colIndex: number, token: PlayerType): void => {\n    setGameState(\n      switchSide(\n        updateGameStatus({\n          ...gameState,\n          grid: gameState.grid.map((col, index) =>\n            index === colIndex ? col.concat(token) : col\n          )\n        }, {row: gameState.grid[colIndex].length, col: colIndex})\n      )\n    );\n  };\n\n  const resetGame = (): void => {\n    setGameState(getInitialState(boardWidth, boardHeight));\n  };\n\n  return [gameState, setGameStage, placeToken, resetGame];\n};\n\nexport default useConnectFour;\n","import React, {ReactElement} from 'react';\nimport {PlayerType, TokenColour} from '../../../globals';\n\nimport {UserConfCardProps} from './types';\nimport './style.scss';\nimport Token from '../../board/token/Token';\n\nconst UserConfCard = (props: UserConfCardProps): ReactElement => {\n  const updateGameConfig = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.setGameConfig(\n      {\n        ...props.gameConfig,\n        [e.target.name]: e.target.value\n      }\n    );\n  };\n  const playerOne = props.player === PlayerType.PlayerOne;\n\n  return (\n    <div className='user-conf-card'>\n      <div className='avatar-wrapper'>\n        <Token \n          colour={\n            playerOne \n              ? props.gameConfig.playerOneColour \n              : props.gameConfig.playerTwoColour\n          }\n        />\n      </div>\n      <label>\n        <input type='text' name={playerOne ? 'playerOneName' : 'playerTwoName'}\n          value={playerOne ? props.gameConfig.playerOneName : props.gameConfig.playerTwoName}\n          onChange={updateGameConfig}\n        />\n      </label>\n      <br />\n      {Object.values(TokenColour).map(colour => \n        (\n          <label className='radio' key={`radio-${props.player}-${colour}`}>\n            <input \n              type='radio' \n              name={playerOne ? 'playerOneColour' : 'playerTwoColour'}\n              value={colour} onChange={updateGameConfig}\n              checked={\n                (playerOne \n                  ? props.gameConfig.playerOneColour \n                  : props.gameConfig.playerTwoColour\n                ) === colour\n              }\n              disabled={colour === props.disabledColour}\n            />\n            {<Token colour={colour}\n              phantom={colour === props.disabledColour}/>}\n          </label>\n        ))}\n    </div>\n  );\n};\n\nexport default UserConfCard;\n","import React, {FormEvent, ReactElement} from 'react';\nimport {GameStage, PlayerType} from '../../globals';\n\nimport {StartScreenProps} from './types';\nimport './style.scss';\nimport UserConfCard from './userconfcard/UserConfCard';\n\nconst StartScreen = (props: StartScreenProps): ReactElement => {\n  const onSubmit = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    props.setGameStage(GameStage.Ongoing);\n  };\n\n  return (\n    <div className='start-screen'>\n      <h1>Choose your names and token colours:</h1>\n      <form onSubmit={onSubmit}>\n        <div className='conf-container'>\n          <UserConfCard \n            player={PlayerType.PlayerOne}\n            gameConfig={props.gameConfig}\n            setGameConfig={props.setGameConfig}\n            disabledColour={props.gameConfig.playerTwoColour}\n          />\n          <UserConfCard \n            player={PlayerType.PlayerTwo}\n            gameConfig={props.gameConfig}\n            setGameConfig={props.setGameConfig}\n            disabledColour={props.gameConfig.playerOneColour}\n          />\n        </div>\n        <input type='submit' value='Start' />\n      </form>\n    </div>\n  );\n};\n\nexport default StartScreen;\n","import React, {ReactElement, useState} from 'react';\nimport Board from '../components/board/Board';\nimport EndScreen from '../components/endscreen/EndScreen';\nimport {TokenColour, BOARD_HEIGHT, BOARD_WIDTH, GameStage} from '../globals';\nimport useConnectFour from '../game/useConnectFour';\nimport StartScreen from '../components/startscreen/StartScreen';\nimport {GameConfig} from '../game/types';\n\nconst App = (): ReactElement => {\n  const [gameState, setGameStage, placeToken, resetGame]\n    = useConnectFour(BOARD_WIDTH, BOARD_HEIGHT);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({\n    playerOneName: 'Player 1',\n    playerTwoName: 'Player 2',\n    playerOneColour: TokenColour.Green,\n    playerTwoColour: TokenColour.Purple\n  });\n  return (\n    <div className='App'>\n      {\n        gameState.gameStage === GameStage.Start\n          ? <StartScreen\n            gameState={gameState}\n            gameConfig={gameConfig}\n            setGameStage={setGameStage}\n            setGameConfig={setGameConfig}\n          />\n          : <></>\n      }\n      {\n        gameState.gameStage !== GameStage.Start\n          ? <Board\n            gameState={gameState}\n            gameConfig={gameConfig}\n            placeToken={placeToken}\n          />\n          : <></>\n      }\n      {\n        gameState.gameStage === GameStage.End\n          ? <EndScreen\n            gameState={gameState}\n            setGameStage={setGameStage}\n            resetGame={resetGame}\n            gameConfig={gameConfig}\n          />\n          : <></>\n      }\n    </div>\n  );\n};\n\nexport default App;\n"],"names":["props","_jsx","className","children","concat","colour","phantom","hovered","setHovered","useState","tokenToColour","token","PlayerType","PlayerOne","gameConfig","playerOneColour","PlayerTwo","playerTwoColour","full","tokens","length","gameState","boardHeight","showPhantom","onClick","undefined","onMouseEnter","onMouseLeave","map","tokenIndex","Token","index","currentPlayer","Array","fill","_","reverse","columns","grid","col","colIndex","Column","placeToken","message","winner","playerOneName","playerTwoName","_jsxs","onSubmit","e","preventDefault","setGameStage","GameStage","Start","resetGame","type","value","getInitialState","boardWidth","gameStage","useConnectFour","setGameState","stage","_objectSpread","player","switchSide","updateGameStatus","lastPos","checkRowLength","rowOffset","colOffset","currPos","rowLength","WIN_LENGTH","row","End","filter","updateGameConfig","setGameConfig","target","name","playerOne","onChange","Object","values","TokenColour","checked","disabled","disabledColour","Ongoing","UserConfCard","App","BOARD_WIDTH","BOARD_HEIGHT","Green","Purple","StartScreen","_Fragment","Board","EndScreen"],"sourceRoot":""}